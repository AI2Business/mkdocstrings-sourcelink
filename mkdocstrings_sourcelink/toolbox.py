""" [summary] """
import importlib
import inspect
from abc import ABC, abstractmethod
from pathlib import Path
from typing import Any, Dict, Optional, Union


class BuilderUtilities(ABC):
    """BuilderUtilities [summary]

    [extended_summary]

    Args:
        ABC ([type]): [description]
    """

    @abstractmethod
    def insert_in_file(self) -> None:
        """Abstract method of `insert_in_file`."""

    @abstractmethod
    def element_to_mkdocstrings(self) -> None:
        """Abstract method of `element_to_mkdocstrings`."""

    @abstractmethod
    def make_source_link(self) -> None:
        """Abstract method of `make_source_link`."""

    @abstractmethod
    def make_title(self) -> None:
        """Abstract method of `make_title`."""

    @abstractmethod
    def ismethod(self) -> None:
        """Abstract method of `ismethod`."""

    @abstractmethod
    def import_object(self) -> None:
        """Abstract method of `import_object`."""

    @abstractmethod
    def return_as_Path(self) -> None:
        """Abstract method of `return_as_Path`"""


class Utilities(BuilderUtilities):
    """Utilities [summary]

    [extended_summary]

    Args:
        AbstractUtilities (class): [description]
    """

    def insert_in_file(markdown_text: str, file_path: Path) -> None:
        """insert_in_file [summary]

        Save module page.

        Either insert content into existing page,
        or create page otherwise.
        Args:
            markdown_text (str): [description]
            file_path (Path): [description]

        Raises:
            RuntimeError: [description]
        """
        if file_path.exists():
            template = file_path.read_text(encoding="utf-8")
            if "{{autogenerated}}" not in template:
                raise RuntimeError(
                    f"Template found for {file_path} but missing "
                    f"{{autogenerated}} tag."
                )
            markdown_text = template.replace("{{autogenerated}}", markdown_text)
            print(f"...inserting autogenerated content into template:{file_path}")
        else:
            print(f"...creating new page with autogenerated content:{file_path}")
        file_path.parent.mkdir(parents=True, exist_ok=True)
        file_path.write_text(markdown_text, encoding="utf-8")

    def element_to_mkdocstrings(element: str, titles_size: str) -> str:
        """element_to_mkdocstrings [summary]

        [extended_summary]

        Args:
            element (str): [description]

        Returns:
            str: [description]
        """
        return f"##{titles_size} :::{element}\n"

    def make_source_link(
        cls: Any,
        project_url: Union[str, Dict[str, str]],
        source: str = "**source code**",
    ) -> str:
        """make_source_link [summary]

        [extended_summary]

        Args:
            cls (Any): [description]
            project_url (Union[str, Dict[str, str]]): [description]
            source (str, optional): [description]. Defaults to "**source code**".

        Returns:
            str: [description]
        """
        if isinstance(project_url, dict):
            base_module = cls.__module__.split(".")[0]
            project_url = project_url[base_module]

        if isinstance(cls, property):
            path = cls.fget.__module__.replace(".", "/")
            line = inspect.getsourcelines(cls.fget)[-1]
        else:
            path = cls.__module__.replace(".", "/")
            line = inspect.getsourcelines(cls)[-1]

        return (
            f'<span style="float:right;">'
            f"[{source}]({project_url}/{path}.py#L{line})"
            f"</span>"
        )

    def make_title(cls: Any, titles_size: str, underline_title: bool) -> str:
        """make_title [summary]

        [extended_summary]

        Args:
            cls (Any): [description]
            titles_size (str): [description]

        Returns:
            str: [description]
        """
        title_underline = "\n---\n" if underline_title else "\n"
        if isinstance(cls, property):
            return f"#{titles_size} {cls.fget.__name__}{title_underline}"
        return f"#{titles_size} {cls.__name__}{title_underline}"

    def ismethod(function: Any) -> Union[Any, bool]:
        """ismethod [summary]

        [extended_summary]

        Args:
            function (Any): [description]

        Returns:
            Union[Any, bool]: [description]
        """
        if inspect.ismethod(function):
            for cls in inspect.getmro(function.__self__.__class__):
                if cls.__dict__.get(function.__name__) is function:
                    return cls
            function = function.__func__  # fallback to __qualname__ parsing
        if inspect.isfunction(function):
            cls = getattr(
                inspect.getmodule(function),
                function.__qualname__.split(".<locals>", 1)[0].rsplit(".", 1)[0],
            )
            if isinstance(cls, type):
                return cls

        return bool(getattr(function, "__objclass__", None))

    def import_object(element: str) -> object:
        """import_object [summary]

        Import an object from a string.

        The object can be a function, class or method.
        For example: `'keras.layers.Dense.get_weights'` is valid.

        Args:
            element (str): [description]

        Returns:
            object: [description]
        """
        last_object_got = None
        seen_names = []
        for name in element.split("."):
            seen_names.append(name)
            try:
                last_object_got = importlib.import_module(".".join(seen_names))
            except ModuleNotFoundError:
                last_object_got = getattr(last_object_got, name)

        return last_object_got

    def return_as_Path(path: str = None) -> Optional[Path]:
        """return_as_Path [summary]

        [extended_summary]

        Args:
            path (str, optional): [description]. Defaults to None.

        Returns:
            Optional[Path]: [description]
        """
        if path:
            return Path(path)
        return None

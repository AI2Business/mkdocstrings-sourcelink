{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"mkdocstrings-sourcelink Automatic source link generation for mkdocstrings Overview mkdocstrings-sourcelink is a source link generator for mkdocstrings , which allows connecting the source code to a repository independent of the host ( GitHub , GitLab , own Services). The original idea of mkdocstrings-sourcelink was coming from keras-autodoc and used as inspiration. However, this implementation focuses on using straight mkdocstrings and not rephrase docstrings into the documentation. Furthermore, mkdocstrings-sourcelink also allows: Generating API list Using templates and examples Importing existing markdown files like README.md Installation pip install mkdocstrings-sourcelink Usage The usage requires just three steps: \u276f python generate_docs.py \u276f mkdocs.yml \u276f mkdocs deploy","title":"Introduction"},{"location":"#mkdocstrings-sourcelink","text":"Automatic source link generation for mkdocstrings","title":"mkdocstrings-sourcelink"},{"location":"#overview","text":"mkdocstrings-sourcelink is a source link generator for mkdocstrings , which allows connecting the source code to a repository independent of the host ( GitHub , GitLab , own Services). The original idea of mkdocstrings-sourcelink was coming from keras-autodoc and used as inspiration. However, this implementation focuses on using straight mkdocstrings and not rephrase docstrings into the documentation. Furthermore, mkdocstrings-sourcelink also allows: Generating API list Using templates and examples Importing existing markdown files like README.md","title":"Overview"},{"location":"#installation","text":"pip install mkdocstrings-sourcelink","title":"Installation"},{"location":"#usage","text":"The usage requires just three steps: \u276f python generate_docs.py \u276f mkdocs.yml \u276f mkdocs deploy","title":"Usage"},{"location":"api/","text":"API MkDocGenerator The MkDocGenerator generates the documentation with the links to the source code. Parameters: Name Type Description Default Utilities class [description] required BuilderMkDoc class Builder class of the abstract methods and property of MkDocGenerator . required generate : None property readonly The property generate of MkDocGenerator creates the final markdown files. Example: How to use >>> from pathlib import Path # Import mkdocstrings-sourcelink >>> from mkdocstrings_sourcelink import MkDocGenerator # Define the dictionary for the documentation >>> pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] }, \"Tools\" : { \"toolbox.md\" : [ \"mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file\" , \"mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_source_link\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_title\" , \"mkdocstrings_sourcelink.toolbox.Utilities.import_object\" , \"mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path\" , ], }, } # Define the dictionary for the importing existing markdown files. >>> markdown_files = { \"HOME\" : { \"index.md\" : [ \"../README.md\" ]}, \"CONTRIBUTING\" : { \"contributing.md\" : [ \"../CONTRIBUTING.md\" ]}, \"LICENSE\" : { \"license.md\" : [ \"../LICENSE\" ]}, } >>> root = Path ( __file__ ) . resolve () . parents [ 1 ] # Make use of the generate poperty of MkDocGenerator >>> MkDocGenerator ( root / \"docs\" / \"src\" , pages , \"https://github.com/AI2Business/mkdocstrings-sourcelink/blob/main\" , markdown_files = markdown_files , underline_title = True , source = \":material-github::material-source-branch:\" , ) . generate >>> ... __init__ ( self , dest_dir , documentation , project_url = None , template_dir = None , example_dir = None , markdown_files = None , titles_size = '#' , underline_title = False , source = '**source code**' ) special Generates the documentation via MkDocGenerator with the links to the source. Parameters: Name Type Description Default dest_dir Union[str, pathlib.Path] Destination of the generated documentation. required documentation Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: pages = {'page_title':{'filename.md': ['package.module.function']}} . required project_url Union[str, Dict[str, str]] The URL, where the project is hosted and where it should be linked to (including branch and storage). None template_dir Union[str, pathlib.Path] Directory of template files. If template has to be automatically filled out, then the keyword {{autogenerated}} has to be used. None example_dir Union[str, pathlib.Path] Directory of example files, especially suitable for Jupyter-Notebooks . None markdown_files Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the link to already existing markdown files like README.md or LICENSE . The dictionary should look like: pages = {'page_title':{'filename.md': ['existing_file.md']}} . None titles_size str Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". '#' underline_title bool Underline titles of classes, functions, and methods. False source str Name of the source link. '**source code**' About documentation In terms of linking to the project_url, it has to be separated between specific and general linking. If functions or method has to be separately linked, then each module of the class Documentation has to be called individually like: pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] } } If functions or method has to be generally linked, then just call the class Documentation is enough. It will be only generated one single link to the start of the class. pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\" , } } For more information, please check: mkdocstrings pawamoy/mkdocstrings About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . About project_url Keep in mind, that the name of the branch like master , main , or dev , as well as, the name of the storage like blob for GitHub has to be included. Source code in mkdocstrings_sourcelink/auto_generator.py def __init__ ( self , dest_dir : Union [ str , Path ], documentation : Dict [ str , Dict [ str , List [ str ]]], project_url : Union [ str , Dict [ str , str ]] = None , template_dir : Union [ str , Path ] = None , example_dir : Union [ str , Path ] = None , markdown_files : Dict [ str , Dict [ str , List [ str ]]] = None , titles_size : str = \"#\" , underline_title : bool = False , source : str = \"**source code**\" , ) -> None : \"\"\"Generates the documentation via `MkDocGenerator` with the links to the source. Args: dest_dir (Union[str, Path]): Destination of the generated documentation. documentation (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: `pages = {'page_title':{'filename.md': ['package.module.function']}}`. project_url (Union[str, Dict[str, str]], optional): The URL, where the project is hosted and where it should be linked to (including branch and storage). template_dir (Union[str, Path], optional): Directory of template files. If template has to be automatically filled out, then the keyword **{{autogenerated}}** has to be used. example_dir (Union[str, Path], optional): Directory of example files, especially suitable for `Jupyter-Notebooks`. markdown_files (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the link to already existing markdown files like **README.md** or **LICENSE**. The dictionary should look like: `pages = {'page_title':{'filename.md': ['existing_file.md']}}`. titles_size (str, optional): Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". underline_title (bool, optional): Underline titles of classes, functions, and methods. source (str, optional): Name of the source link. !!! info \"About *documentation*\" In terms of linking to the project_url, it has to be separated between *specific* and *general* linking. If functions or method has to be separately linked, then each module of the class `Documentation` has to be called individually like: ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\", ] } } ``` If functions or method has to be generally linked, then just call the class `Documentation` is enough. It will be only generated one single link to the start of the class. ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\", } } ``` For more information, please check: **mkdocstrings** https://github.com/pawamoy/mkdocstrings !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. !!! warning \"About *project_url*\" Keep in mind, that the name of the branch like *master*, *main*, or *dev*, as well as, the name of the storage like *blob* for GitHub has to be included. \"\"\" self . dest_dir = Path ( dest_dir ) self . documentation = documentation self . project_url = project_url self . template_dir = Utilities . return_as_Path ( template_dir ) self . example_dir = Utilities . return_as_Path ( example_dir ) self . markdown_files = markdown_files self . titles_size = titles_size self . underline_title = underline_title self . source = source generate_docs ( self ) Generated dynamic documentation based on calling the elements via dictionary. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_docs ( self ) -> None : \"\"\"Generated *dynamic* documentation based on calling the elements via dictionary.\"\"\" for title , documentation in self . documentation . items (): markdown_text = f \" { self . titles_size } { title } \\n\\n --- \\n\\n \" for file_path , elements in documentation . items (): markdown_text += \"\" . join ( self . render_to_markdown ( element ) for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path )) generate_static ( self ) Generate static documentation based on existing markdown files. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_static ( self ) -> None : \"\"\"Generate *static* documentation based on existing markdown files.\"\"\" if self . markdown_files : for _ , markdown_files in self . markdown_files . items (): markdown_text = \"\" for file_path , elements in markdown_files . items (): markdown_text += \"\" . join ( Path ( element ) . read_text () for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path ) ) initialize_generate ( self ) Initialization of the auto documentation generatorion. Firs removing a possible existing target directory ( dest_dir ). Copy templates from the template directory the target directory( dest_dir ). Copy example from the example directory the target directory ( dest_dir ). Source code in mkdocstrings_sourcelink/auto_generator.py def initialize_generate ( self ) -> None : \"\"\"Initialization of the auto documentation generatorion. 1. Firs removing a possible existing target directory (`dest_dir`). 2. Copy templates from the template directory the target directory(`dest_dir`). 3. Copy example from the example directory the target directory (`dest_dir`). \"\"\" if self . dest_dir . exists (): print ( f \"Cleaning up existing sources directory ' { self . dest_dir } '.\" ) shutil . rmtree ( self . dest_dir ) if self . template_dir : print ( f \"...copying existing sources directory ' { self . template_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . template_dir , self . dest_dir ) if self . example_dir : print ( f \"...copying existing sources directory ' { self . example_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . example_dir , self . dest_dir ) render_to_markdown ( self , element ) Rendering the element path to mkdocstrings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required Returns: Type Description str str: Return of the initial string which looks like mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__ into a markdown conformed string. Source code in mkdocstrings_sourcelink/auto_generator.py def render_to_markdown ( self , element : str ) -> str : \"\"\"Rendering the element path to mkdocstrings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. Returns: str: Return of the initial string which looks like `mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__` into a markdown conformed string. \"\"\" object_ = Utilities . import_object ( element ) subblocks = [] if self . project_url : subblocks . append ( Utilities . make_source_link ( object_ , self . project_url , self . source ) ) subblocks . append ( Utilities . make_title ( object_ , self . titles_size , self . underline_title ) ) subblocks . append ( Utilities . element_to_mkdocstrings ( element , self . titles_size )) return \" \\n\\n \" . join ( subblocks ) + \" \\n\\n \" Utilities The Utilities build the mkdocstrings and generate the hyperlinks to the source code. Parameters: Name Type Description Default AbstractUtilities class Builder class of the abstract staticmethods of Utilities . required element_to_mkdocstrings ( element , titles_size ) staticmethod Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added ::: in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def element_to_mkdocstrings ( element : str , titles_size : str ) -> str : \"\"\"Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added **:::** in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. \"\"\" return f \"## { titles_size } ::: { element } \\n \" import_object ( element ) staticmethod Import an object like class, function, or method from a string. Parameters: Name Type Description Default element str String of class, function, or method, which should be converted to an object. required Returns: Type Description object object: Class, function, or method object for the giving element. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def import_object ( element : str ) -> object : \"\"\"Import an object like class, function, or method from a string. Args: element (str): String of class, function, or method, which should be converted to an object. Returns: object: Class, function, or method object for the giving element. \"\"\" last_object_got = None seen_names = [] for name in element . split ( \".\" ): seen_names . append ( name ) try : last_object_got = importlib . import_module ( \".\" . join ( seen_names )) except ModuleNotFoundError : last_object_got = getattr ( last_object_got , name ) return last_object_got insert_in_file ( markdown_text , file_path ) staticmethod Insert the markdown formatted text into a new or existing file. Parameters: Name Type Description Default markdown_text str Text as string, which follows the markdown format. required file_path Path Filename and path as Path object. required Exceptions: Type Description RuntimeError If {{autogenerated}} is not provided in a template file, it will cause a a RuntimeError . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def insert_in_file ( markdown_text : str , file_path : Path ) -> None : \"\"\"Insert the markdown formatted text into a new or existing file. Args: markdown_text (str): Text as string, which follows the markdown format. file_path (Path): Filename and path as Path object. Raises: RuntimeError: If {{autogenerated}} is not provided in a template file, it will cause a a **RuntimeError**. \"\"\" if file_path . exists (): template = file_path . read_text ( encoding = \"utf-8\" ) if \"{{autogenerated}}\" not in template : raise RuntimeError ( f \"Template found for { file_path } but missing \" f \" {{ autogenerated }} tag.\" ) markdown_text = template . replace ( \"{{autogenerated}}\" , markdown_text ) print ( f \"...inserting autogenerated content into template: { file_path } \" ) else : print ( f \"...creating new page with autogenerated content: { file_path } \" ) file_path . parent . mkdir ( parents = True , exist_ok = True ) file_path . write_text ( markdown_text , encoding = \"utf-8\" ) make_source_link ( cls , project_url , source = '**source code**' ) staticmethod Make a source link to the code basis including the linestart. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. required project_url Union[str, Dict[str, str]] URL to the repository like GitHub AI2Business/mkdocstrings-sourcelink . required source str Name or sticker name for rendering the link to the source. '**source code**' Returns: Type Description str str: Hyperlink in html format with link to the repository. About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_source_link ( cls : classmethod , project_url : Union [ str , Dict [ str , str ]], source : str = \"**source code**\" , ) -> str : \"\"\"Make a source link to the code basis including the linestart. Args: cls (classmethod): Convert a function to be a class method. project_url (Union[str, Dict[str, str]]): URL to the repository like GitHub https://github.com/AI2Business/mkdocstrings-sourcelink/. source (str, optional): Name or sticker name for rendering the link to the source. Returns: str: Hyperlink in html format with link to the repository. !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. \"\"\" if isinstance ( project_url , dict ): if isinstance ( cls , property ): base_module = cls . fget . __module__ . split ( \".\" )[ 0 ] else : base_module = cls . __module__ . split ( \".\" )[ 0 ] project_url = project_url [ base_module ] if isinstance ( cls , property ): path = cls . fget . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls . fget )[ - 1 ] else : path = cls . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls )[ - 1 ] return ( f '<span style=\"float:right;\">' f \"[ { source } ]( { project_url } / { path } .py#L { line } )\" f \"</span>\" ) make_title ( cls , titles_size , underline_title ) staticmethod Make the title of the class, function, or method. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. In case of class properties fget is used to read out the name of the module. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: The name of the class, function, or method in a markdown conformed title. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_title ( cls : classmethod , titles_size : str , underline_title : bool ) -> str : \"\"\"Make the title of the class, function, or method. Args: cls (classmethod): Convert a function to be a class method. In case of class properties `fget` is used to read out the name of the module. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: The name of the class, function, or method in a markdown conformed title. \"\"\" title_underline = \" \\n --- \\n \" if underline_title else \" \\n \" if isinstance ( cls , property ): return f \"# { titles_size } { cls . fget . __name__ }{ title_underline } \" return f \"# { titles_size } { cls . __name__ }{ title_underline } \" return_as_Path ( path = None ) staticmethod Converts strings to Path of pathlib. Parameters: Name Type Description Default path str String of a filename. None Returns: Type Description Optional[pathlib.Path] Optional[Path]: Path object of the initial filename. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def return_as_Path ( path : str = None ) -> Optional [ Path ]: \"\"\"Converts strings to Path of pathlib. Args: path (str, optional): String of a filename. Returns: Optional[Path]: Path object of the initial filename. \"\"\" if path : return Path ( path ) return None","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#mkdocgenerator","text":"","title":"MkDocGenerator"},{"location":"api/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator","text":"The MkDocGenerator generates the documentation with the links to the source code. Parameters: Name Type Description Default Utilities class [description] required BuilderMkDoc class Builder class of the abstract methods and property of MkDocGenerator . required","title":"mkdocstrings_sourcelink.auto_generator.MkDocGenerator"},{"location":"api/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate","text":"The property generate of MkDocGenerator creates the final markdown files. Example: How to use >>> from pathlib import Path # Import mkdocstrings-sourcelink >>> from mkdocstrings_sourcelink import MkDocGenerator # Define the dictionary for the documentation >>> pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] }, \"Tools\" : { \"toolbox.md\" : [ \"mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file\" , \"mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_source_link\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_title\" , \"mkdocstrings_sourcelink.toolbox.Utilities.import_object\" , \"mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path\" , ], }, } # Define the dictionary for the importing existing markdown files. >>> markdown_files = { \"HOME\" : { \"index.md\" : [ \"../README.md\" ]}, \"CONTRIBUTING\" : { \"contributing.md\" : [ \"../CONTRIBUTING.md\" ]}, \"LICENSE\" : { \"license.md\" : [ \"../LICENSE\" ]}, } >>> root = Path ( __file__ ) . resolve () . parents [ 1 ] # Make use of the generate poperty of MkDocGenerator >>> MkDocGenerator ( root / \"docs\" / \"src\" , pages , \"https://github.com/AI2Business/mkdocstrings-sourcelink/blob/main\" , markdown_files = markdown_files , underline_title = True , source = \":material-github::material-source-branch:\" , ) . generate >>> ...","title":"generate"},{"location":"api/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__","text":"Generates the documentation via MkDocGenerator with the links to the source. Parameters: Name Type Description Default dest_dir Union[str, pathlib.Path] Destination of the generated documentation. required documentation Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: pages = {'page_title':{'filename.md': ['package.module.function']}} . required project_url Union[str, Dict[str, str]] The URL, where the project is hosted and where it should be linked to (including branch and storage). None template_dir Union[str, pathlib.Path] Directory of template files. If template has to be automatically filled out, then the keyword {{autogenerated}} has to be used. None example_dir Union[str, pathlib.Path] Directory of example files, especially suitable for Jupyter-Notebooks . None markdown_files Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the link to already existing markdown files like README.md or LICENSE . The dictionary should look like: pages = {'page_title':{'filename.md': ['existing_file.md']}} . None titles_size str Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". '#' underline_title bool Underline titles of classes, functions, and methods. False source str Name of the source link. '**source code**' About documentation In terms of linking to the project_url, it has to be separated between specific and general linking. If functions or method has to be separately linked, then each module of the class Documentation has to be called individually like: pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] } } If functions or method has to be generally linked, then just call the class Documentation is enough. It will be only generated one single link to the start of the class. pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\" , } } For more information, please check: mkdocstrings pawamoy/mkdocstrings About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . About project_url Keep in mind, that the name of the branch like master , main , or dev , as well as, the name of the storage like blob for GitHub has to be included. Source code in mkdocstrings_sourcelink/auto_generator.py def __init__ ( self , dest_dir : Union [ str , Path ], documentation : Dict [ str , Dict [ str , List [ str ]]], project_url : Union [ str , Dict [ str , str ]] = None , template_dir : Union [ str , Path ] = None , example_dir : Union [ str , Path ] = None , markdown_files : Dict [ str , Dict [ str , List [ str ]]] = None , titles_size : str = \"#\" , underline_title : bool = False , source : str = \"**source code**\" , ) -> None : \"\"\"Generates the documentation via `MkDocGenerator` with the links to the source. Args: dest_dir (Union[str, Path]): Destination of the generated documentation. documentation (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: `pages = {'page_title':{'filename.md': ['package.module.function']}}`. project_url (Union[str, Dict[str, str]], optional): The URL, where the project is hosted and where it should be linked to (including branch and storage). template_dir (Union[str, Path], optional): Directory of template files. If template has to be automatically filled out, then the keyword **{{autogenerated}}** has to be used. example_dir (Union[str, Path], optional): Directory of example files, especially suitable for `Jupyter-Notebooks`. markdown_files (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the link to already existing markdown files like **README.md** or **LICENSE**. The dictionary should look like: `pages = {'page_title':{'filename.md': ['existing_file.md']}}`. titles_size (str, optional): Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". underline_title (bool, optional): Underline titles of classes, functions, and methods. source (str, optional): Name of the source link. !!! info \"About *documentation*\" In terms of linking to the project_url, it has to be separated between *specific* and *general* linking. If functions or method has to be separately linked, then each module of the class `Documentation` has to be called individually like: ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\", ] } } ``` If functions or method has to be generally linked, then just call the class `Documentation` is enough. It will be only generated one single link to the start of the class. ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\", } } ``` For more information, please check: **mkdocstrings** https://github.com/pawamoy/mkdocstrings !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. !!! warning \"About *project_url*\" Keep in mind, that the name of the branch like *master*, *main*, or *dev*, as well as, the name of the storage like *blob* for GitHub has to be included. \"\"\" self . dest_dir = Path ( dest_dir ) self . documentation = documentation self . project_url = project_url self . template_dir = Utilities . return_as_Path ( template_dir ) self . example_dir = Utilities . return_as_Path ( example_dir ) self . markdown_files = markdown_files self . titles_size = titles_size self . underline_title = underline_title self . source = source","title":"__init__()"},{"location":"api/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs","text":"Generated dynamic documentation based on calling the elements via dictionary. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_docs ( self ) -> None : \"\"\"Generated *dynamic* documentation based on calling the elements via dictionary.\"\"\" for title , documentation in self . documentation . items (): markdown_text = f \" { self . titles_size } { title } \\n\\n --- \\n\\n \" for file_path , elements in documentation . items (): markdown_text += \"\" . join ( self . render_to_markdown ( element ) for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path ))","title":"generate_docs()"},{"location":"api/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static","text":"Generate static documentation based on existing markdown files. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_static ( self ) -> None : \"\"\"Generate *static* documentation based on existing markdown files.\"\"\" if self . markdown_files : for _ , markdown_files in self . markdown_files . items (): markdown_text = \"\" for file_path , elements in markdown_files . items (): markdown_text += \"\" . join ( Path ( element ) . read_text () for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path ) )","title":"generate_static()"},{"location":"api/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate","text":"Initialization of the auto documentation generatorion. Firs removing a possible existing target directory ( dest_dir ). Copy templates from the template directory the target directory( dest_dir ). Copy example from the example directory the target directory ( dest_dir ). Source code in mkdocstrings_sourcelink/auto_generator.py def initialize_generate ( self ) -> None : \"\"\"Initialization of the auto documentation generatorion. 1. Firs removing a possible existing target directory (`dest_dir`). 2. Copy templates from the template directory the target directory(`dest_dir`). 3. Copy example from the example directory the target directory (`dest_dir`). \"\"\" if self . dest_dir . exists (): print ( f \"Cleaning up existing sources directory ' { self . dest_dir } '.\" ) shutil . rmtree ( self . dest_dir ) if self . template_dir : print ( f \"...copying existing sources directory ' { self . template_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . template_dir , self . dest_dir ) if self . example_dir : print ( f \"...copying existing sources directory ' { self . example_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . example_dir , self . dest_dir )","title":"initialize_generate()"},{"location":"api/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown","text":"Rendering the element path to mkdocstrings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required Returns: Type Description str str: Return of the initial string which looks like mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__ into a markdown conformed string. Source code in mkdocstrings_sourcelink/auto_generator.py def render_to_markdown ( self , element : str ) -> str : \"\"\"Rendering the element path to mkdocstrings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. Returns: str: Return of the initial string which looks like `mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__` into a markdown conformed string. \"\"\" object_ = Utilities . import_object ( element ) subblocks = [] if self . project_url : subblocks . append ( Utilities . make_source_link ( object_ , self . project_url , self . source ) ) subblocks . append ( Utilities . make_title ( object_ , self . titles_size , self . underline_title ) ) subblocks . append ( Utilities . element_to_mkdocstrings ( element , self . titles_size )) return \" \\n\\n \" . join ( subblocks ) + \" \\n\\n \"","title":"render_to_markdown()"},{"location":"api/#utilities","text":"","title":"Utilities"},{"location":"api/#mkdocstrings_sourcelink.toolbox.Utilities","text":"The Utilities build the mkdocstrings and generate the hyperlinks to the source code. Parameters: Name Type Description Default AbstractUtilities class Builder class of the abstract staticmethods of Utilities . required","title":"mkdocstrings_sourcelink.toolbox.Utilities"},{"location":"api/#mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings","text":"Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added ::: in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def element_to_mkdocstrings ( element : str , titles_size : str ) -> str : \"\"\"Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added **:::** in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. \"\"\" return f \"## { titles_size } ::: { element } \\n \"","title":"element_to_mkdocstrings()"},{"location":"api/#mkdocstrings_sourcelink.toolbox.Utilities.import_object","text":"Import an object like class, function, or method from a string. Parameters: Name Type Description Default element str String of class, function, or method, which should be converted to an object. required Returns: Type Description object object: Class, function, or method object for the giving element. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def import_object ( element : str ) -> object : \"\"\"Import an object like class, function, or method from a string. Args: element (str): String of class, function, or method, which should be converted to an object. Returns: object: Class, function, or method object for the giving element. \"\"\" last_object_got = None seen_names = [] for name in element . split ( \".\" ): seen_names . append ( name ) try : last_object_got = importlib . import_module ( \".\" . join ( seen_names )) except ModuleNotFoundError : last_object_got = getattr ( last_object_got , name ) return last_object_got","title":"import_object()"},{"location":"api/#mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file","text":"Insert the markdown formatted text into a new or existing file. Parameters: Name Type Description Default markdown_text str Text as string, which follows the markdown format. required file_path Path Filename and path as Path object. required Exceptions: Type Description RuntimeError If {{autogenerated}} is not provided in a template file, it will cause a a RuntimeError . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def insert_in_file ( markdown_text : str , file_path : Path ) -> None : \"\"\"Insert the markdown formatted text into a new or existing file. Args: markdown_text (str): Text as string, which follows the markdown format. file_path (Path): Filename and path as Path object. Raises: RuntimeError: If {{autogenerated}} is not provided in a template file, it will cause a a **RuntimeError**. \"\"\" if file_path . exists (): template = file_path . read_text ( encoding = \"utf-8\" ) if \"{{autogenerated}}\" not in template : raise RuntimeError ( f \"Template found for { file_path } but missing \" f \" {{ autogenerated }} tag.\" ) markdown_text = template . replace ( \"{{autogenerated}}\" , markdown_text ) print ( f \"...inserting autogenerated content into template: { file_path } \" ) else : print ( f \"...creating new page with autogenerated content: { file_path } \" ) file_path . parent . mkdir ( parents = True , exist_ok = True ) file_path . write_text ( markdown_text , encoding = \"utf-8\" )","title":"insert_in_file()"},{"location":"api/#mkdocstrings_sourcelink.toolbox.Utilities.make_source_link","text":"Make a source link to the code basis including the linestart. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. required project_url Union[str, Dict[str, str]] URL to the repository like GitHub AI2Business/mkdocstrings-sourcelink . required source str Name or sticker name for rendering the link to the source. '**source code**' Returns: Type Description str str: Hyperlink in html format with link to the repository. About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_source_link ( cls : classmethod , project_url : Union [ str , Dict [ str , str ]], source : str = \"**source code**\" , ) -> str : \"\"\"Make a source link to the code basis including the linestart. Args: cls (classmethod): Convert a function to be a class method. project_url (Union[str, Dict[str, str]]): URL to the repository like GitHub https://github.com/AI2Business/mkdocstrings-sourcelink/. source (str, optional): Name or sticker name for rendering the link to the source. Returns: str: Hyperlink in html format with link to the repository. !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. \"\"\" if isinstance ( project_url , dict ): if isinstance ( cls , property ): base_module = cls . fget . __module__ . split ( \".\" )[ 0 ] else : base_module = cls . __module__ . split ( \".\" )[ 0 ] project_url = project_url [ base_module ] if isinstance ( cls , property ): path = cls . fget . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls . fget )[ - 1 ] else : path = cls . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls )[ - 1 ] return ( f '<span style=\"float:right;\">' f \"[ { source } ]( { project_url } / { path } .py#L { line } )\" f \"</span>\" )","title":"make_source_link()"},{"location":"api/#mkdocstrings_sourcelink.toolbox.Utilities.make_title","text":"Make the title of the class, function, or method. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. In case of class properties fget is used to read out the name of the module. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: The name of the class, function, or method in a markdown conformed title. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_title ( cls : classmethod , titles_size : str , underline_title : bool ) -> str : \"\"\"Make the title of the class, function, or method. Args: cls (classmethod): Convert a function to be a class method. In case of class properties `fget` is used to read out the name of the module. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: The name of the class, function, or method in a markdown conformed title. \"\"\" title_underline = \" \\n --- \\n \" if underline_title else \" \\n \" if isinstance ( cls , property ): return f \"# { titles_size } { cls . fget . __name__ }{ title_underline } \" return f \"# { titles_size } { cls . __name__ }{ title_underline } \"","title":"make_title()"},{"location":"api/#mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path","text":"Converts strings to Path of pathlib. Parameters: Name Type Description Default path str String of a filename. None Returns: Type Description Optional[pathlib.Path] Optional[Path]: Path object of the initial filename. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def return_as_Path ( path : str = None ) -> Optional [ Path ]: \"\"\"Converts strings to Path of pathlib. Args: path (str, optional): String of a filename. Returns: Optional[Path]: Path object of the initial filename. \"\"\" if path : return Path ( path ) return None","title":"return_as_Path()"},{"location":"auto_generator/","text":"Documentation init Generates the documentation via MkDocGenerator with the links to the source. Parameters: Name Type Description Default dest_dir Union[str, pathlib.Path] Destination of the generated documentation. required documentation Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: pages = {'page_title':{'filename.md': ['package.module.function']}} . required project_url Union[str, Dict[str, str]] The URL, where the project is hosted and where it should be linked to (including branch and storage). None template_dir Union[str, pathlib.Path] Directory of template files. If template has to be automatically filled out, then the keyword {{autogenerated}} has to be used. None example_dir Union[str, pathlib.Path] Directory of example files, especially suitable for Jupyter-Notebooks . None markdown_files Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the link to already existing markdown files like README.md or LICENSE . The dictionary should look like: pages = {'page_title':{'filename.md': ['existing_file.md']}} . None titles_size str Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". '#' underline_title bool Underline titles of classes, functions, and methods. False source str Name of the source link. '**source code**' About documentation In terms of linking to the project_url, it has to be separated between specific and general linking. If functions or method has to be separately linked, then each module of the class Documentation has to be called individually like: pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] } } If functions or method has to be generally linked, then just call the class Documentation is enough. It will be only generated one single link to the start of the class. pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\" , } } For more information, please check: mkdocstrings pawamoy/mkdocstrings About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . About project_url Keep in mind, that the name of the branch like master , main , or dev , as well as, the name of the storage like blob for GitHub has to be included. Source code in mkdocstrings_sourcelink/auto_generator.py def __init__ ( self , dest_dir : Union [ str , Path ], documentation : Dict [ str , Dict [ str , List [ str ]]], project_url : Union [ str , Dict [ str , str ]] = None , template_dir : Union [ str , Path ] = None , example_dir : Union [ str , Path ] = None , markdown_files : Dict [ str , Dict [ str , List [ str ]]] = None , titles_size : str = \"#\" , underline_title : bool = False , source : str = \"**source code**\" , ) -> None : \"\"\"Generates the documentation via `MkDocGenerator` with the links to the source. Args: dest_dir (Union[str, Path]): Destination of the generated documentation. documentation (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: `pages = {'page_title':{'filename.md': ['package.module.function']}}`. project_url (Union[str, Dict[str, str]], optional): The URL, where the project is hosted and where it should be linked to (including branch and storage). template_dir (Union[str, Path], optional): Directory of template files. If template has to be automatically filled out, then the keyword **{{autogenerated}}** has to be used. example_dir (Union[str, Path], optional): Directory of example files, especially suitable for `Jupyter-Notebooks`. markdown_files (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the link to already existing markdown files like **README.md** or **LICENSE**. The dictionary should look like: `pages = {'page_title':{'filename.md': ['existing_file.md']}}`. titles_size (str, optional): Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". underline_title (bool, optional): Underline titles of classes, functions, and methods. source (str, optional): Name of the source link. !!! info \"About *documentation*\" In terms of linking to the project_url, it has to be separated between *specific* and *general* linking. If functions or method has to be separately linked, then each module of the class `Documentation` has to be called individually like: ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\", ] } } ``` If functions or method has to be generally linked, then just call the class `Documentation` is enough. It will be only generated one single link to the start of the class. ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\", } } ``` For more information, please check: **mkdocstrings** https://github.com/pawamoy/mkdocstrings !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. !!! warning \"About *project_url*\" Keep in mind, that the name of the branch like *master*, *main*, or *dev*, as well as, the name of the storage like *blob* for GitHub has to be included. \"\"\" self . dest_dir = Path ( dest_dir ) self . documentation = documentation self . project_url = project_url self . template_dir = Utilities . return_as_Path ( template_dir ) self . example_dir = Utilities . return_as_Path ( example_dir ) self . markdown_files = markdown_files self . titles_size = titles_size self . underline_title = underline_title self . source = source render_to_markdown Rendering the element path to mkdocstrings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required Returns: Type Description str str: Return of the initial string which looks like mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__ into a markdown conformed string. Source code in mkdocstrings_sourcelink/auto_generator.py def render_to_markdown ( self , element : str ) -> str : \"\"\"Rendering the element path to mkdocstrings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. Returns: str: Return of the initial string which looks like `mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__` into a markdown conformed string. \"\"\" object_ = Utilities . import_object ( element ) subblocks = [] if self . project_url : subblocks . append ( Utilities . make_source_link ( object_ , self . project_url , self . source ) ) subblocks . append ( Utilities . make_title ( object_ , self . titles_size , self . underline_title ) ) subblocks . append ( Utilities . element_to_mkdocstrings ( element , self . titles_size )) return \" \\n\\n \" . join ( subblocks ) + \" \\n\\n \" initialize_generate Initialization of the auto documentation generatorion. Firs removing a possible existing target directory ( dest_dir ). Copy templates from the template directory the target directory( dest_dir ). Copy example from the example directory the target directory ( dest_dir ). Source code in mkdocstrings_sourcelink/auto_generator.py def initialize_generate ( self ) -> None : \"\"\"Initialization of the auto documentation generatorion. 1. Firs removing a possible existing target directory (`dest_dir`). 2. Copy templates from the template directory the target directory(`dest_dir`). 3. Copy example from the example directory the target directory (`dest_dir`). \"\"\" if self . dest_dir . exists (): print ( f \"Cleaning up existing sources directory ' { self . dest_dir } '.\" ) shutil . rmtree ( self . dest_dir ) if self . template_dir : print ( f \"...copying existing sources directory ' { self . template_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . template_dir , self . dest_dir ) if self . example_dir : print ( f \"...copying existing sources directory ' { self . example_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . example_dir , self . dest_dir ) generate_docs Generated dynamic documentation based on calling the elements via dictionary. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_docs ( self ) -> None : \"\"\"Generated *dynamic* documentation based on calling the elements via dictionary.\"\"\" for title , documentation in self . documentation . items (): markdown_text = f \" { self . titles_size } { title } \\n\\n --- \\n\\n \" for file_path , elements in documentation . items (): markdown_text += \"\" . join ( self . render_to_markdown ( element ) for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path )) generate_static Generate static documentation based on existing markdown files. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_static ( self ) -> None : \"\"\"Generate *static* documentation based on existing markdown files.\"\"\" if self . markdown_files : for _ , markdown_files in self . markdown_files . items (): markdown_text = \"\" for file_path , elements in markdown_files . items (): markdown_text += \"\" . join ( Path ( element ) . read_text () for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path ) ) generate The property generate of MkDocGenerator creates the final markdown files. Example: How to use >>> from pathlib import Path # Import mkdocstrings-sourcelink >>> from mkdocstrings_sourcelink import MkDocGenerator # Define the dictionary for the documentation >>> pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] }, \"Tools\" : { \"toolbox.md\" : [ \"mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file\" , \"mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_source_link\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_title\" , \"mkdocstrings_sourcelink.toolbox.Utilities.import_object\" , \"mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path\" , ], }, } # Define the dictionary for the importing existing markdown files. >>> markdown_files = { \"HOME\" : { \"index.md\" : [ \"../README.md\" ]}, \"CONTRIBUTING\" : { \"contributing.md\" : [ \"../CONTRIBUTING.md\" ]}, \"LICENSE\" : { \"license.md\" : [ \"../LICENSE\" ]}, } >>> root = Path ( __file__ ) . resolve () . parents [ 1 ] # Make use of the generate poperty of MkDocGenerator >>> MkDocGenerator ( root / \"docs\" / \"src\" , pages , \"https://github.com/AI2Business/mkdocstrings-sourcelink/blob/main\" , markdown_files = markdown_files , underline_title = True , source = \":material-github::material-source-branch:\" , ) . generate >>> ...","title":"Automatic Doc Generator"},{"location":"auto_generator/#documentation","text":"","title":"Documentation"},{"location":"auto_generator/#init","text":"","title":"init"},{"location":"auto_generator/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__","text":"Generates the documentation via MkDocGenerator with the links to the source. Parameters: Name Type Description Default dest_dir Union[str, pathlib.Path] Destination of the generated documentation. required documentation Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: pages = {'page_title':{'filename.md': ['package.module.function']}} . required project_url Union[str, Dict[str, str]] The URL, where the project is hosted and where it should be linked to (including branch and storage). None template_dir Union[str, pathlib.Path] Directory of template files. If template has to be automatically filled out, then the keyword {{autogenerated}} has to be used. None example_dir Union[str, pathlib.Path] Directory of example files, especially suitable for Jupyter-Notebooks . None markdown_files Dict[str, Dict[str, List[str]]] A nested dictionary with the page title, the page filename, and the link to already existing markdown files like README.md or LICENSE . The dictionary should look like: pages = {'page_title':{'filename.md': ['existing_file.md']}} . None titles_size str Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". '#' underline_title bool Underline titles of classes, functions, and methods. False source str Name of the source link. '**source code**' About documentation In terms of linking to the project_url, it has to be separated between specific and general linking. If functions or method has to be separately linked, then each module of the class Documentation has to be called individually like: pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] } } If functions or method has to be generally linked, then just call the class Documentation is enough. It will be only generated one single link to the start of the class. pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\" , } } For more information, please check: mkdocstrings pawamoy/mkdocstrings About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . About project_url Keep in mind, that the name of the branch like master , main , or dev , as well as, the name of the storage like blob for GitHub has to be included. Source code in mkdocstrings_sourcelink/auto_generator.py def __init__ ( self , dest_dir : Union [ str , Path ], documentation : Dict [ str , Dict [ str , List [ str ]]], project_url : Union [ str , Dict [ str , str ]] = None , template_dir : Union [ str , Path ] = None , example_dir : Union [ str , Path ] = None , markdown_files : Dict [ str , Dict [ str , List [ str ]]] = None , titles_size : str = \"#\" , underline_title : bool = False , source : str = \"**source code**\" , ) -> None : \"\"\"Generates the documentation via `MkDocGenerator` with the links to the source. Args: dest_dir (Union[str, Path]): Destination of the generated documentation. documentation (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the functions /classes / methods names of the page. The dictionary should look like: `pages = {'page_title':{'filename.md': ['package.module.function']}}`. project_url (Union[str, Dict[str, str]], optional): The URL, where the project is hosted and where it should be linked to (including branch and storage). template_dir (Union[str, Path], optional): Directory of template files. If template has to be automatically filled out, then the keyword **{{autogenerated}}** has to be used. example_dir (Union[str, Path], optional): Directory of example files, especially suitable for `Jupyter-Notebooks`. markdown_files (Dict[str, Dict[str, List[str]]], optional): A nested dictionary with the page title, the page filename, and the link to already existing markdown files like **README.md** or **LICENSE**. The dictionary should look like: `pages = {'page_title':{'filename.md': ['existing_file.md']}}`. titles_size (str, optional): Defines the initial title size for the headings, which are scaled down by the factor of one \"#\". underline_title (bool, optional): Underline titles of classes, functions, and methods. source (str, optional): Name of the source link. !!! info \"About *documentation*\" In terms of linking to the project_url, it has to be separated between *specific* and *general* linking. If functions or method has to be separately linked, then each module of the class `Documentation` has to be called individually like: ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\", \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\", ] } } ``` If functions or method has to be generally linked, then just call the class `Documentation` is enough. It will be only generated one single link to the start of the class. ```python pages = { \"Documentation\": { \"auto_generator.md\": [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\", } } ``` For more information, please check: **mkdocstrings** https://github.com/pawamoy/mkdocstrings !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. !!! warning \"About *project_url*\" Keep in mind, that the name of the branch like *master*, *main*, or *dev*, as well as, the name of the storage like *blob* for GitHub has to be included. \"\"\" self . dest_dir = Path ( dest_dir ) self . documentation = documentation self . project_url = project_url self . template_dir = Utilities . return_as_Path ( template_dir ) self . example_dir = Utilities . return_as_Path ( example_dir ) self . markdown_files = markdown_files self . titles_size = titles_size self . underline_title = underline_title self . source = source","title":"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__"},{"location":"auto_generator/#render_to_markdown","text":"","title":"render_to_markdown"},{"location":"auto_generator/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown","text":"Rendering the element path to mkdocstrings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required Returns: Type Description str str: Return of the initial string which looks like mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__ into a markdown conformed string. Source code in mkdocstrings_sourcelink/auto_generator.py def render_to_markdown ( self , element : str ) -> str : \"\"\"Rendering the element path to mkdocstrings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. Returns: str: Return of the initial string which looks like `mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__` into a markdown conformed string. \"\"\" object_ = Utilities . import_object ( element ) subblocks = [] if self . project_url : subblocks . append ( Utilities . make_source_link ( object_ , self . project_url , self . source ) ) subblocks . append ( Utilities . make_title ( object_ , self . titles_size , self . underline_title ) ) subblocks . append ( Utilities . element_to_mkdocstrings ( element , self . titles_size )) return \" \\n\\n \" . join ( subblocks ) + \" \\n\\n \"","title":"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown"},{"location":"auto_generator/#initialize_generate","text":"","title":"initialize_generate"},{"location":"auto_generator/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate","text":"Initialization of the auto documentation generatorion. Firs removing a possible existing target directory ( dest_dir ). Copy templates from the template directory the target directory( dest_dir ). Copy example from the example directory the target directory ( dest_dir ). Source code in mkdocstrings_sourcelink/auto_generator.py def initialize_generate ( self ) -> None : \"\"\"Initialization of the auto documentation generatorion. 1. Firs removing a possible existing target directory (`dest_dir`). 2. Copy templates from the template directory the target directory(`dest_dir`). 3. Copy example from the example directory the target directory (`dest_dir`). \"\"\" if self . dest_dir . exists (): print ( f \"Cleaning up existing sources directory ' { self . dest_dir } '.\" ) shutil . rmtree ( self . dest_dir ) if self . template_dir : print ( f \"...copying existing sources directory ' { self . template_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . template_dir , self . dest_dir ) if self . example_dir : print ( f \"...copying existing sources directory ' { self . example_dir } ' to ' { self . dest_dir } '.\" ) shutil . copytree ( self . example_dir , self . dest_dir )","title":"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate"},{"location":"auto_generator/#generate_docs","text":"","title":"generate_docs"},{"location":"auto_generator/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs","text":"Generated dynamic documentation based on calling the elements via dictionary. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_docs ( self ) -> None : \"\"\"Generated *dynamic* documentation based on calling the elements via dictionary.\"\"\" for title , documentation in self . documentation . items (): markdown_text = f \" { self . titles_size } { title } \\n\\n --- \\n\\n \" for file_path , elements in documentation . items (): markdown_text += \"\" . join ( self . render_to_markdown ( element ) for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path ))","title":"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs"},{"location":"auto_generator/#generate_static","text":"","title":"generate_static"},{"location":"auto_generator/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static","text":"Generate static documentation based on existing markdown files. Source code in mkdocstrings_sourcelink/auto_generator.py def generate_static ( self ) -> None : \"\"\"Generate *static* documentation based on existing markdown files.\"\"\" if self . markdown_files : for _ , markdown_files in self . markdown_files . items (): markdown_text = \"\" for file_path , elements in markdown_files . items (): markdown_text += \"\" . join ( Path ( element ) . read_text () for element in elements ) Utilities . insert_in_file ( markdown_text , self . dest_dir . joinpath ( file_path ) )","title":"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static"},{"location":"auto_generator/#generate","text":"","title":"generate"},{"location":"auto_generator/#mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate","text":"The property generate of MkDocGenerator creates the final markdown files. Example: How to use >>> from pathlib import Path # Import mkdocstrings-sourcelink >>> from mkdocstrings_sourcelink import MkDocGenerator # Define the dictionary for the documentation >>> pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] }, \"Tools\" : { \"toolbox.md\" : [ \"mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file\" , \"mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_source_link\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_title\" , \"mkdocstrings_sourcelink.toolbox.Utilities.import_object\" , \"mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path\" , ], }, } # Define the dictionary for the importing existing markdown files. >>> markdown_files = { \"HOME\" : { \"index.md\" : [ \"../README.md\" ]}, \"CONTRIBUTING\" : { \"contributing.md\" : [ \"../CONTRIBUTING.md\" ]}, \"LICENSE\" : { \"license.md\" : [ \"../LICENSE\" ]}, } >>> root = Path ( __file__ ) . resolve () . parents [ 1 ] # Make use of the generate poperty of MkDocGenerator >>> MkDocGenerator ( root / \"docs\" / \"src\" , pages , \"https://github.com/AI2Business/mkdocstrings-sourcelink/blob/main\" , markdown_files = markdown_files , underline_title = True , source = \":material-github::material-source-branch:\" , ) . generate >>> ...","title":"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate"},{"location":"contributing/","text":"Contributing When contributing to this repository, please first discuss the change you wish to make via issue or any other method with this repository owners before making a change. Please note we have a code of conduct. Please follow it in all your interactions with the project. Pull Request Process Ensure any install or build dependencies are removed before the end of the layer when doing a build. Ensure you are follwing the code style. Update the docstrings and the README.md .","title":"Contribution"},{"location":"contributing/#contributing","text":"When contributing to this repository, please first discuss the change you wish to make via issue or any other method with this repository owners before making a change. Please note we have a code of conduct. Please follow it in all your interactions with the project.","title":"Contributing"},{"location":"contributing/#pull-request-process","text":"Ensure any install or build dependencies are removed before the end of the layer when doing a build. Ensure you are follwing the code style. Update the docstrings and the README.md .","title":"Pull Request Process"},{"location":"example/","text":"Example A generate_docs.py file like for mkdocstrings-sourcelink can look like: from pathlib import Path from mkdocstrings_sourcelink import MkDocGenerator pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] }, \"Tools\" : { \"toolbox.md\" : [ \"mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file\" , \"mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_source_link\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_title\" , \"mkdocstrings_sourcelink.toolbox.Utilities.import_object\" , \"mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path\" , ], }, \"API\" : { \"api.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\" , \"mkdocstrings_sourcelink.toolbox.Utilities\" , ], }, } markdown_files = { \"HOME\" : { \"index.md\" : [ \"../README.md\" ]}, \"CONTRIBUTING\" : { \"contributing.md\" : [ \"../CONTRIBUTING.md\" ]}, \"LICENSE\" : { \"license.md\" : [ \"../LICENSE\" ]}, } root = Path ( __file__ ) . resolve () . parents [ 1 ] MkDocGenerator ( root / \"docs\" / \"src\" , pages , \"https://github.com/AI2Business/mkdocstrings-sourcelink/blob/main\" , markdown_files = markdown_files , underline_title = True , source = \":material-github::material-source-branch:\" , ) . generate And will generate the docs Note the docs will not be modified via edit , they will be modified in the docstrings of the source code.","title":"Example"},{"location":"example/#example","text":"A generate_docs.py file like for mkdocstrings-sourcelink can look like: from pathlib import Path from mkdocstrings_sourcelink import MkDocGenerator pages = { \"Documentation\" : { \"auto_generator.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.__init__\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.render_to_markdown\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.initialize_generate\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_docs\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate_static\" , \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator.generate\" , ] }, \"Tools\" : { \"toolbox.md\" : [ \"mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file\" , \"mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_source_link\" , \"mkdocstrings_sourcelink.toolbox.Utilities.make_title\" , \"mkdocstrings_sourcelink.toolbox.Utilities.import_object\" , \"mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path\" , ], }, \"API\" : { \"api.md\" : [ \"mkdocstrings_sourcelink.auto_generator.MkDocGenerator\" , \"mkdocstrings_sourcelink.toolbox.Utilities\" , ], }, } markdown_files = { \"HOME\" : { \"index.md\" : [ \"../README.md\" ]}, \"CONTRIBUTING\" : { \"contributing.md\" : [ \"../CONTRIBUTING.md\" ]}, \"LICENSE\" : { \"license.md\" : [ \"../LICENSE\" ]}, } root = Path ( __file__ ) . resolve () . parents [ 1 ] MkDocGenerator ( root / \"docs\" / \"src\" , pages , \"https://github.com/AI2Business/mkdocstrings-sourcelink/blob/main\" , markdown_files = markdown_files , underline_title = True , source = \":material-github::material-source-branch:\" , ) . generate And will generate the docs Note the docs will not be modified via edit , they will be modified in the docstrings of the source code.","title":"Example"},{"location":"license/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and \u00a9 You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work , attach the following boilerplate notice , with the fields enclosed by brackets \" [] \" replaced with your own identifying information . ( Don ' t include the brackets ! ) The text should be enclosed in the appropriate comment syntax for the file format . We also recommend that a file or class name and description of purpose be included on the same \" printed page \" as the copyright notice for easier identification within third - party archives . Copyright 2021 Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. mkdocstrings-sourcelink is inspired and partially derived, from keras-autodoc extension keras-team/keras-autodoc .","title":"LICENSE"},{"location":"toolbox/","text":"Tools insert_in_file Insert the markdown formatted text into a new or existing file. Parameters: Name Type Description Default markdown_text str Text as string, which follows the markdown format. required file_path Path Filename and path as Path object. required Exceptions: Type Description RuntimeError If {{autogenerated}} is not provided in a template file, it will cause a a RuntimeError . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def insert_in_file ( markdown_text : str , file_path : Path ) -> None : \"\"\"Insert the markdown formatted text into a new or existing file. Args: markdown_text (str): Text as string, which follows the markdown format. file_path (Path): Filename and path as Path object. Raises: RuntimeError: If {{autogenerated}} is not provided in a template file, it will cause a a **RuntimeError**. \"\"\" if file_path . exists (): template = file_path . read_text ( encoding = \"utf-8\" ) if \"{{autogenerated}}\" not in template : raise RuntimeError ( f \"Template found for { file_path } but missing \" f \" {{ autogenerated }} tag.\" ) markdown_text = template . replace ( \"{{autogenerated}}\" , markdown_text ) print ( f \"...inserting autogenerated content into template: { file_path } \" ) else : print ( f \"...creating new page with autogenerated content: { file_path } \" ) file_path . parent . mkdir ( parents = True , exist_ok = True ) file_path . write_text ( markdown_text , encoding = \"utf-8\" ) element_to_mkdocstrings Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added ::: in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def element_to_mkdocstrings ( element : str , titles_size : str ) -> str : \"\"\"Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added **:::** in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. \"\"\" return f \"## { titles_size } ::: { element } \\n \" make_source_link Make a source link to the code basis including the linestart. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. required project_url Union[str, Dict[str, str]] URL to the repository like GitHub AI2Business/mkdocstrings-sourcelink . required source str Name or sticker name for rendering the link to the source. '**source code**' Returns: Type Description str str: Hyperlink in html format with link to the repository. About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_source_link ( cls : classmethod , project_url : Union [ str , Dict [ str , str ]], source : str = \"**source code**\" , ) -> str : \"\"\"Make a source link to the code basis including the linestart. Args: cls (classmethod): Convert a function to be a class method. project_url (Union[str, Dict[str, str]]): URL to the repository like GitHub https://github.com/AI2Business/mkdocstrings-sourcelink/. source (str, optional): Name or sticker name for rendering the link to the source. Returns: str: Hyperlink in html format with link to the repository. !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. \"\"\" if isinstance ( project_url , dict ): if isinstance ( cls , property ): base_module = cls . fget . __module__ . split ( \".\" )[ 0 ] else : base_module = cls . __module__ . split ( \".\" )[ 0 ] project_url = project_url [ base_module ] if isinstance ( cls , property ): path = cls . fget . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls . fget )[ - 1 ] else : path = cls . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls )[ - 1 ] return ( f '<span style=\"float:right;\">' f \"[ { source } ]( { project_url } / { path } .py#L { line } )\" f \"</span>\" ) make_title Make the title of the class, function, or method. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. In case of class properties fget is used to read out the name of the module. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: The name of the class, function, or method in a markdown conformed title. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_title ( cls : classmethod , titles_size : str , underline_title : bool ) -> str : \"\"\"Make the title of the class, function, or method. Args: cls (classmethod): Convert a function to be a class method. In case of class properties `fget` is used to read out the name of the module. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: The name of the class, function, or method in a markdown conformed title. \"\"\" title_underline = \" \\n --- \\n \" if underline_title else \" \\n \" if isinstance ( cls , property ): return f \"# { titles_size } { cls . fget . __name__ }{ title_underline } \" return f \"# { titles_size } { cls . __name__ }{ title_underline } \" import_object Import an object like class, function, or method from a string. Parameters: Name Type Description Default element str String of class, function, or method, which should be converted to an object. required Returns: Type Description object object: Class, function, or method object for the giving element. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def import_object ( element : str ) -> object : \"\"\"Import an object like class, function, or method from a string. Args: element (str): String of class, function, or method, which should be converted to an object. Returns: object: Class, function, or method object for the giving element. \"\"\" last_object_got = None seen_names = [] for name in element . split ( \".\" ): seen_names . append ( name ) try : last_object_got = importlib . import_module ( \".\" . join ( seen_names )) except ModuleNotFoundError : last_object_got = getattr ( last_object_got , name ) return last_object_got return_as_Path Converts strings to Path of pathlib. Parameters: Name Type Description Default path str String of a filename. None Returns: Type Description Optional[pathlib.Path] Optional[Path]: Path object of the initial filename. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def return_as_Path ( path : str = None ) -> Optional [ Path ]: \"\"\"Converts strings to Path of pathlib. Args: path (str, optional): String of a filename. Returns: Optional[Path]: Path object of the initial filename. \"\"\" if path : return Path ( path ) return None","title":"Tools"},{"location":"toolbox/#tools","text":"","title":"Tools"},{"location":"toolbox/#insert_in_file","text":"","title":"insert_in_file"},{"location":"toolbox/#mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file","text":"Insert the markdown formatted text into a new or existing file. Parameters: Name Type Description Default markdown_text str Text as string, which follows the markdown format. required file_path Path Filename and path as Path object. required Exceptions: Type Description RuntimeError If {{autogenerated}} is not provided in a template file, it will cause a a RuntimeError . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def insert_in_file ( markdown_text : str , file_path : Path ) -> None : \"\"\"Insert the markdown formatted text into a new or existing file. Args: markdown_text (str): Text as string, which follows the markdown format. file_path (Path): Filename and path as Path object. Raises: RuntimeError: If {{autogenerated}} is not provided in a template file, it will cause a a **RuntimeError**. \"\"\" if file_path . exists (): template = file_path . read_text ( encoding = \"utf-8\" ) if \"{{autogenerated}}\" not in template : raise RuntimeError ( f \"Template found for { file_path } but missing \" f \" {{ autogenerated }} tag.\" ) markdown_text = template . replace ( \"{{autogenerated}}\" , markdown_text ) print ( f \"...inserting autogenerated content into template: { file_path } \" ) else : print ( f \"...creating new page with autogenerated content: { file_path } \" ) file_path . parent . mkdir ( parents = True , exist_ok = True ) file_path . write_text ( markdown_text , encoding = \"utf-8\" )","title":"mkdocstrings_sourcelink.toolbox.Utilities.insert_in_file"},{"location":"toolbox/#element_to_mkdocstrings","text":"","title":"element_to_mkdocstrings"},{"location":"toolbox/#mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings","text":"Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added ::: in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Parameters: Name Type Description Default element str String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def element_to_mkdocstrings ( element : str , titles_size : str ) -> str : \"\"\"Converts point separated string into the mkdocstrings format. For converting the elements to mkdocstrings, the element will added **:::** in front of the element string. In addition to that, the the new mkdocstrings will get subheadings. Args: element (str): String of they python class, function, or method, which has to be converted to a string in the mkdocstrings format. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: String of they python class, function, or method, which is converted to a string in the mkdocstrings format. \"\"\" return f \"## { titles_size } ::: { element } \\n \"","title":"mkdocstrings_sourcelink.toolbox.Utilities.element_to_mkdocstrings"},{"location":"toolbox/#make_source_link","text":"","title":"make_source_link"},{"location":"toolbox/#mkdocstrings_sourcelink.toolbox.Utilities.make_source_link","text":"Make a source link to the code basis including the linestart. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. required project_url Union[str, Dict[str, str]] URL to the repository like GitHub AI2Business/mkdocstrings-sourcelink . required source str Name or sticker name for rendering the link to the source. '**source code**' Returns: Type Description str str: Hyperlink in html format with link to the repository. About source Instead of using a string for source = \"**source code**\" , icons can be used instead or as combination of string + icon(s) like. source = \":material-github::material-source-branch: source-code\" In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace mdl by material . Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_source_link ( cls : classmethod , project_url : Union [ str , Dict [ str , str ]], source : str = \"**source code**\" , ) -> str : \"\"\"Make a source link to the code basis including the linestart. Args: cls (classmethod): Convert a function to be a class method. project_url (Union[str, Dict[str, str]]): URL to the repository like GitHub https://github.com/AI2Business/mkdocstrings-sourcelink/. source (str, optional): Name or sticker name for rendering the link to the source. Returns: str: Hyperlink in html format with link to the repository. !!! tip \"About *source*\" Instead of using a string for `source = \"**source code**\"`, icons can be used instead or as combination of string + icon(s) like. ```python source = \":material-github::material-source-branch: source-code\" ``` In case of using material-icons, please check https://pictogrammers.github.io/@mdi/font/5.4.55/ and replace `mdl` by `material`. \"\"\" if isinstance ( project_url , dict ): if isinstance ( cls , property ): base_module = cls . fget . __module__ . split ( \".\" )[ 0 ] else : base_module = cls . __module__ . split ( \".\" )[ 0 ] project_url = project_url [ base_module ] if isinstance ( cls , property ): path = cls . fget . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls . fget )[ - 1 ] else : path = cls . __module__ . replace ( \".\" , \"/\" ) line = inspect . getsourcelines ( cls )[ - 1 ] return ( f '<span style=\"float:right;\">' f \"[ { source } ]( { project_url } / { path } .py#L { line } )\" f \"</span>\" )","title":"mkdocstrings_sourcelink.toolbox.Utilities.make_source_link"},{"location":"toolbox/#make_title","text":"","title":"make_title"},{"location":"toolbox/#mkdocstrings_sourcelink.toolbox.Utilities.make_title","text":"Make the title of the class, function, or method. Parameters: Name Type Description Default cls classmethod Convert a function to be a class method. In case of class properties fget is used to read out the name of the module. required titles_size str Current title size in the style of '#', which defines the headings. required Returns: Type Description str str: The name of the class, function, or method in a markdown conformed title. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def make_title ( cls : classmethod , titles_size : str , underline_title : bool ) -> str : \"\"\"Make the title of the class, function, or method. Args: cls (classmethod): Convert a function to be a class method. In case of class properties `fget` is used to read out the name of the module. titles_size (str): Current title size in the style of '#', which defines the headings. Returns: str: The name of the class, function, or method in a markdown conformed title. \"\"\" title_underline = \" \\n --- \\n \" if underline_title else \" \\n \" if isinstance ( cls , property ): return f \"# { titles_size } { cls . fget . __name__ }{ title_underline } \" return f \"# { titles_size } { cls . __name__ }{ title_underline } \"","title":"mkdocstrings_sourcelink.toolbox.Utilities.make_title"},{"location":"toolbox/#import_object","text":"","title":"import_object"},{"location":"toolbox/#mkdocstrings_sourcelink.toolbox.Utilities.import_object","text":"Import an object like class, function, or method from a string. Parameters: Name Type Description Default element str String of class, function, or method, which should be converted to an object. required Returns: Type Description object object: Class, function, or method object for the giving element. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def import_object ( element : str ) -> object : \"\"\"Import an object like class, function, or method from a string. Args: element (str): String of class, function, or method, which should be converted to an object. Returns: object: Class, function, or method object for the giving element. \"\"\" last_object_got = None seen_names = [] for name in element . split ( \".\" ): seen_names . append ( name ) try : last_object_got = importlib . import_module ( \".\" . join ( seen_names )) except ModuleNotFoundError : last_object_got = getattr ( last_object_got , name ) return last_object_got","title":"mkdocstrings_sourcelink.toolbox.Utilities.import_object"},{"location":"toolbox/#return_as_path","text":"","title":"return_as_Path"},{"location":"toolbox/#mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path","text":"Converts strings to Path of pathlib. Parameters: Name Type Description Default path str String of a filename. None Returns: Type Description Optional[pathlib.Path] Optional[Path]: Path object of the initial filename. Source code in mkdocstrings_sourcelink/toolbox.py @staticmethod def return_as_Path ( path : str = None ) -> Optional [ Path ]: \"\"\"Converts strings to Path of pathlib. Args: path (str, optional): String of a filename. Returns: Optional[Path]: Path object of the initial filename. \"\"\" if path : return Path ( path ) return None","title":"mkdocstrings_sourcelink.toolbox.Utilities.return_as_Path"}]}